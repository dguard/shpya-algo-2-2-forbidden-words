Алгоритмы 2 и C++
Задача 2-2 - Запрещенные слова
Александр Сердитов
Ссылка на задание:
https://shad.contest.yandex.ru/contest/1103/enter/

Словесное описание алгоритма
Построим автомат, читающий запрещенные слова (используем алгоритм Ахо-Корасика), после чего с помощью динамического программирования посчитаем все запрещенные слова среди слов длины n.

Для этого необходимо ввести функцию forbidden(n,v), которая будет возвращать количество терминальных вершин для n переходов в автомате, начиная с v-вершины. Считаем количество всех слов длины n, имеющих в своем составе запрещенные слова, с помощью вычисления forbidden(n, 1).

Пусть нам известны forbidden(m–1, v_i) для всех v_i, где 1 < m <= n. Тогда вычислим forbidden(m, v) как сумму forbidden(m–1, v_i) для каждой буквы из алфавита, где v_i — состояние, в которое мы попадем в результате перехода по букве. Ответ будет находиться в forbidden(n, 1) — количество терминальных вершин, в которые мы попадём за n-шагов по любым буквам алфавита. Другими словами это количество всех слов длины n, содержащих в качестве подслова запрещенные слова. Вычисленные результаты храним в таблице N | V.
В случае попадания в терминальное состояние forbidden(n_j, terminal) — вычисляем количество запрещенных слов как степень мощности алфавита равную разности n и глубины вершины в автомате (l**(n – глубина вершины)).

Доказательство того, что алгоритм всегда завершается и корректно работает
n конечно и на каждом шаге рекурсии уменьшается на единицу, поэтому алгоритм всегда завершается. Построение автомата определяет корректность алгоритма, так как попадание в терминальную вершину означает наличие запрещенного подслова во всех словах, содержащих данный путь.

Асимптотическая оценка времени работы алгоритма
Заполняем таблицу n * v, где v — количество состояний в автомате; для этого перебираем все символы алфавита на каждый forbidden(), который считается первый раз. Размер таблицы v * n и v не превосходит n, поэтому время O(l * n**2).

Асимптотическая оценка памяти, потребляемой алгоритмом
Храним автомат и таблицу динамического программирования: O(n**2)